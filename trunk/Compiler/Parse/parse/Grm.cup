package Parse;
import Absyn.*;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  public Absyn.Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public parser(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

terminal String STRING;
terminal Integer INT;

terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN,ID, 
	LBRACK, RBRACK, LBRACE, RBRACE, DOT, PLUS, MINUS, 
	TIMES, DIVIDE, EQ, NEQ, LT, LE, GT, GE, AND, OR, 
	ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO, DO, 
	LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE,
	UMINUS;

non terminal Exp expr, program;
non terminal ExpList exprlist, exprseq;
non terminal Dec declaration;
non terminal DecList declarationlist;
non terminal VarDec variabledeclaration;
non terminal TypeDec typedeclaration, typedeclist;
non terminal FunctionDec functiondeclaration, functiondeclist;
non terminal Ty type;
non terminal Var lvalue;
non terminal FieldExpList fieldlist;
non terminal FieldList typefields;

precedence right FUNCTION, TYPE;
precedence right OF;
precedence right DO, ELSE, THEN;
precedence nonassoc ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc EQ, NEQ, GT, LT, GE, LE;
precedence left PLUS, MINUS; 
precedence left TIMES, DIVIDE;
precedence right UMINUS;
precedence left LPAREN;
precedence left LBRACK;

start with program;

program ::= expr:e
{:parser.parseResult = (Exp)e;:}
;

expr::=  STRING:s 
{:RESULT = new StringExp(sleft, s);:}
	 |	 INT:i 
{:RESULT = new IntExp(ileft, i.intValue());:}
	 |	 NIL:n 
{:RESULT = new NilExp(nleft);:}

	 |	 lvalue:e1 
{:RESULT = new VarExp(e1.pos, e1);:}

	 |	 lvalue:l ASSIGN expr:e
{:RESULT = new AssignExp(lleft, l ,e);:}

	 |	 MINUS:m expr:e
{:RESULT = new OpExp(mleft, new IntExp(e.pos, 0), OpExp.MINUS, e);:}%prec UMINUS

	 |	 expr:e1 PLUS expr:e2
{:RESULT = new OpExp(e1.pos, e1, OpExp.PLUS, e2);:}
	 |	 expr:e1 MINUS expr:e2
{:RESULT = new OpExp(e1.pos, e1, OpExp.MINUS, e2);:}
	 |	 expr:e1 TIMES expr:e2
{:RESULT = new OpExp(e1.pos, e1, OpExp.MUL, e2);:}
	 |	 expr:e1 DIVIDE expr:e2
{:RESULT = new OpExp(e1.pos, e1, OpExp.DIV, e2);:}

	 |	 expr:e1 EQ expr:e2
{:RESULT = new OpExp(e1.pos, e1, OpExp.EQ, e2);:}
	 |	 expr:e1 NEQ expr:e2
{:RESULT = new OpExp(e1.pos, e1, OpExp.NE, e2);:}
	 |	 expr:e1 GT expr:e2
{:RESULT = new OpExp(e1.pos, e1, OpExp.GT, e2);:}
	 |	 expr:e1 LT expr:e2
{:RESULT = new OpExp(e1.pos, e1, OpExp.LT, e2);:}
	 |	 expr:e1 GE expr:e2
{:RESULT = new OpExp(e1.pos, e1, OpExp.GE, e2);:}
	 |	 expr:e1 LE expr:e2
{:RESULT = new OpExp(e1.pos, e1, OpExp.LE, e2);:}


	 |	 expr:e1 AND expr:e2
{:RESULT = new IfExp(e1.pos, e1, new IntExp(e1.pos, 0), e2);:}
	 |	 expr:e1 OR expr:e2
{:RESULT = new IfExp(e1.pos, e1, new IntExp(e1.pos, 1), e2);:}


	 |	 ID:i LPAREN exprlist:elist RPAREN
{:RESULT = new CallExp(ileft, Symbol.Symbol.symbol(i), elist);:}
	 |	 ID:i LPAREN RPAREN
{:RESULT = new CallExp(ileft, Symbol.Symbol.symbol(i), null);:}


	 |	 LPAREN:l exprseq:eseq RPAREN
{:RESULT = new SeqExp(lleft, eseq);:}
	 |	 LPAREN:l RPAREN
{:RESULT = new SeqExp(lleft, null);:}


	 |	 ID:i LBRACE fieldlist:flist RBRACE
{:RESULT = new RecordExp(ileft,Symbol.Symbol.symbol(i), flist);:}
	 |	 ID:i LBRACE RBRACE
{:RESULT = new RecordExp(ileft, Symbol.Symbol.symbol(i), null);:}

	 |	 ID:i LBRACK expr:e1 RBRACK OF expr:e2
{:RESULT = new ArrayExp(ileft, Symbol.Symbol.symbol(i), e1, e2);:}

	 |	 IF:i expr:e1 THEN expr:e2 ELSE expr:e3
{:RESULT = new IfExp(ileft, e1, e2, e3);:}
	 |	 IF:i expr:e1 THEN expr:e2
{:RESULT = new IfExp(ileft, e1, e2);:}
	 |	 WHILE:w expr:e1 DO expr:e2
{:RESULT = new WhileExp(wleft, e1, e2);:}
	 |	 FOR:f ID:i ASSIGN expr:e1 TO expr:e2 DO expr:e3
{:RESULT = new ForExp(fleft, new VarDec(ileft, Symbol.Symbol.symbol(i), 
						new NameTy(ileft, Symbol.Symbol.symbol("int")),e1), e2, e3);:}
	 |	 BREAK:b
{:RESULT = new BreakExp(bleft);:}

	 |	 LET:l declarationlist:dlist IN exprseq:eseq END
{:RESULT = new LetExp(lleft, dlist, new SeqExp(eseqleft, eseq));:}
	 |	 LET:l declarationlist:dlist IN END
{:RESULT = new LetExp(lleft, dlist, null);:}
;

exprseq ::= expr:e
{:RESULT = new ExpList(e,null);:}
		 |	 expr:e SEMICOLON exprseq:eseq
{:RESULT = new ExpList(e, eseq);:}
;

exprlist ::= expr:e
{:RESULT = new ExpList(e,null);:}
		 |	expr:e COMMA exprlist:elist
{:RESULT = new ExpList(e, elist);:}
;
	
fieldlist::= ID:i EQ expr:e
{:RESULT = new FieldExpList(ileft, Symbol.Symbol.symbol(i), e, null);:}
		|	ID:i EQ expr:e COMMA fieldlist:flist
{:RESULT = new FieldExpList(ileft, Symbol.Symbol.symbol(i), e, flist);:}
;

lvalue::= 	ID:i
{:RESULT = new SimpleVar(ileft, Symbol.Symbol.symbol(i));:}
		|	lvalue:l DOT ID:i
{:RESULT = new FieldVar(lleft, l, Symbol.Symbol.symbol(i));:}
		|	lvalue:l LBRACK expr:e RBRACK
{:RESULT = new SubscriptVar(lleft, l, e);:}
		|	ID:i LBRACK expr:e RBRACK
{:RESULT = new SubscriptVar(ileft, new SimpleVar(ileft, Symbol.Symbol.symbol(i)),e);:}
;
		
declarationlist::= declaration:dec
{:RESULT = new DecList(dec, null);:}
				|	declaration:dec declarationlist:declist
{:RESULT = new DecList(dec, declist);:}
;

declaration::=  typedeclist:tdec
{:RESULT = tdec;:}
			|	variabledeclaration:vdec
{:RESULT = vdec;:}
			|	functiondeclist:fdec
{:RESULT = fdec;:}
;
			
typedeclist::= typedeclaration:t
{:RESULT = t;:}
		   |	typedeclaration:t typedeclist:l
{:RESULT = new TypeDec(t.pos, t.name, t.ty, l);:}
;
			
typedeclaration::= TYPE:ty ID:i EQ type:t
{:RESULT = new TypeDec(tyleft, Symbol.Symbol.symbol(i), t, null);:}
;

type::=	ID:i
{:RESULT = new NameTy(ileft, Symbol.Symbol.symbol(i));:}
	|	LBRACE:l typefields:f RBRACE
{:RESULT = new RecordTy(lleft, f);:}
	|	LBRACE:l RBRACE
{:RESULT = new RecordTy(lleft,null);:}
	|	ARRAY:a OF ID:i
{:RESULT = new ArrayTy(aleft, Symbol.Symbol.symbol(i));:}
;
	
typefields::= ID:i COLON ID:j
{:RESULT = new FieldList(ileft, Symbol.Symbol.symbol(i), Symbol.Symbol.symbol(j), null);:}
			|  ID:i COLON ID:j COMMA typefields:tf
{:RESULT = new FieldList(ileft, Symbol.Symbol.symbol(i), Symbol.Symbol.symbol(j), tf);:}
;

variabledeclaration::= VAR:v ID:i ASSIGN expr:e
{:RESULT = new VarDec(vleft, Symbol.Symbol.symbol(i), null, e);:}
					|	VAR:v ID:i COLON ID:j ASSIGN expr:e
{:RESULT = new VarDec(vleft, Symbol.Symbol.symbol(i), new NameTy(jleft, Symbol.Symbol.symbol(j)),e);:}
;
					
functiondeclist::= functiondeclaration:f
{:RESULT = f;:}
				|	functiondeclaration:f functiondeclist:l
{:RESULT = new FunctionDec(f.pos, f.name, f.params, f.result, f.body, l);:}
;
					
functiondeclaration::=  FUNCTION:f ID:i LPAREN typefields:flist RPAREN EQ expr:e
{:RESULT = new FunctionDec(fleft, Symbol.Symbol.symbol(i), flist, null, e, null);:}
					|	FUNCTION:f ID:i LPAREN RPAREN EQ expr:e
{:RESULT = new FunctionDec(fleft, Symbol.Symbol.symbol(i), null, null, e, null);:}
					|	FUNCTION:f ID:i LPAREN typefields:flist RPAREN COLON ID:j EQ expr:e
{:RESULT = new FunctionDec (fleft, Symbol.Symbol.symbol(i), flist, new NameTy(jleft, Symbol.Symbol.symbol(j)), e, null);:}
					|	FUNCTION:f ID:i LPAREN RPAREN COLON	ID:j EQ expr:e
{:RESULT = new FunctionDec (fleft, Symbol.Symbol.symbol(i), null, new NameTy(jleft, Symbol.Symbol.symbol(j)), e, null);:}
;